using System.Collections.Generic;using System.Collections;using GameLib.game;using GameServer.Define.EnumNormal;namespace GameDb.Data{	public class TbDataMap{		/**		* 编号		*/		public int Id;		/**		* 名称		*/		public string Name;		/**		* 地图类型		*/		public int MapType;		/**		* 副本类型		*/		public int CloneType;		/**		* 战斗类型		*/		public int FightType;		/**		* 承载人数		*/		public int Occupancy;		/**		* 默认落脚点x		*/		public short DefPosX;		/**		* 默认落脚点y		*/		public short DefPosY;		/**		* 进入所需转生等级		*/		public int RElev;		/**		* 进入所需等级		*/		public int MinLev;		/**		* 是否隐藏战神		*/		public bool IsHideMars;		/**		* 更改名称		*/		public string ChangeName;		/**		* 是否屏蔽死亡信息		*/		public bool IsHideKill;		/**		* 死亡是否清除护卫		*/		public bool IsKillMars;		/**		* 地图功能编号		*/		public int[] FunctionIds;		/**		* 地图功能参数		*/		public string[] FunctionParams;		/**		* 地图资源ID		*/		public string MapRes;		/**		* 地图图片资源ID		*/		public string MapImageRes;		/**		* 地图宽		*/		public int MapWidth;		/**		* 地图高		*/		public int MapHeight;		/**		* 背景音乐		*/		public string SoundMusic;		/**		* 音效		*/		public string SoundEffect;		/**		* 回城点		*/		public int BackCityID;		/**		* 复活点		*/		public int NearbyID;		/**		* 返回类型		*/		public int BackType;		/**		* 返回点		*/		public int BackID;		/**		* 是否记录离开位置		*/		public int IsSavePoint;		/**		* 保存点		*/		public int SavePoint;		/**		* 地图离开确认		*/		public int ConfirmLeave;		/**		* 是否隐藏活动按钮		*/		public int HideActivity;		/**		* 自动拾取类型		*/		public int PickUpType;		/**		* 是否是击打拾取		*/		public bool IsOwnerAttack;		/**		* 是否可向服务器请求怪物		*/		public bool CanRequestSprite;		static public Dictionary<int, TbDataMap> temples=new Dictionary<int,TbDataMap>();		static public void initdata(Dictionary<int,Hashtable> table){			foreach(Hashtable tb in table.Values){			try{				TbDataMap tp=new TbDataMap();				temples[(int)tb["Id"]] = tp;				tp.Id=(int)tb["Id"];				tp.Name=(string)tb["Name"];				tp.MapType=(int)tb["MapType"];				tp.CloneType=(int)tb["CloneType"];				tp.FightType=(int)tb["FightType"];				tp.Occupancy=(int)tb["Occupancy"];				tp.DefPosX=(short)tb["DefPosX"];				tp.DefPosY=(short)tb["DefPosY"];				tp.RElev=(int)tb["RElev"];				tp.MinLev=(int)tb["MinLev"];				tp.IsHideMars=(bool)tb["IsHideMars"];				tp.ChangeName=(string)tb["ChangeName"];				tp.IsHideKill=(bool)tb["IsHideKill"];				tp.IsKillMars=(bool)tb["IsKillMars"];				tp.FunctionIds=(int[])tb["FunctionIds"];				tp.FunctionParams=(string[])tb["FunctionParams"];				tp.MapRes=(string)tb["MapRes"];				tp.MapImageRes=(string)tb["MapImageRes"];				tp.MapWidth=(int)tb["MapWidth"];				tp.MapHeight=(int)tb["MapHeight"];				tp.SoundMusic=(string)tb["SoundMusic"];				tp.SoundEffect=(string)tb["SoundEffect"];				tp.BackCityID=(int)tb["BackCityID"];				tp.NearbyID=(int)tb["NearbyID"];				tp.BackType=(int)tb["BackType"];				tp.BackID=(int)tb["BackID"];				tp.IsSavePoint=(int)tb["IsSavePoint"];				tp.SavePoint=(int)tb["SavePoint"];				tp.ConfirmLeave=(int)tb["ConfirmLeave"];				tp.HideActivity=(int)tb["HideActivity"];				tp.PickUpType=(int)tb["PickUpType"];				tp.IsOwnerAttack=(bool)tb["IsOwnerAttack"];				tp.CanRequestSprite=(bool)tb["CanRequestSprite"];			}catch(System.Exception ee){				System.Console.WriteLine(ee);			}			}		}	static public TbDataMap select(int id) {		if (temples.ContainsKey(id)) {			return temples[id];		}		return null;	}	}}