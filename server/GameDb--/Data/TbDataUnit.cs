using System.Collections.Generic;using System.Collections;using GameLib.game;using GameServer.Define.EnumNormal;namespace GameDb.Data{	public class TbDataUnit{		/**		* 怪物ID		*/		public int Id;		/**		* 显示名		*/		public string Name;		/**		* 编辑器目录		*/		public string Editdir;		/**		* 类型		*/		public int Type;		/**		* 子类型		*/		public int SubType;		/**		* 单位所属组		*/		public int UnitTeam;		/**		* 是否危险		*/		public bool IsDanger;		/**		* 头像		*/		public int Head;		/**		* 转生等级		*/		public int RELev;		/**		* 等级		*/		public int Lev;		/**		* 动画		*/		public int Model;		/**		* 武器		*/		public int Weapon;		/**		* 翅膀		*/		public int Wing;		/**		* 头顶图标		*/		public string UpIcon;		/**		* 大小		*/		public int Size;		/**		* 传送点名称		*/		public int TeleportID;		/**		* 获得经验		*/		public int Exp;		/**		* 获得内功		*/		public int InsidePowerExp;		/**		* 技能间隔时间		*/		public int Interval;		/**		* 默认AI		*/		public int AI;		/**		* AI模式		*/		public int Aimodel;		/**		* 视野范围		*/		public int Sight;		/**		* 追击范围		*/		public int Maxmove;		/**		* 巡逻范围		*/		public int Patrol;		/**		* 巡逻速度		*/		public int PatrolTime;		/**		* 尸体消失时间		*/		public int DeadTime;		/**		* 刷新时间		*/		public int RefreshTime;		/**		* 移动速度		*/		public int MoveTime;		/**		* 等待时间		*/		public int MinStayTime;		/**		* 等待时间		*/		public int MaxStayTime;		/**		* 记录死亡次数		*/		public int DeadNumber;		/**		* 进入音效		*/		public int MoveInMusic;		/**		* 最小伤害		*/		public int MinDamage;		/**		* 最大伤害		*/		public int MaxDamage;		/**		* 血量		*/		public int MHP;		/**		* 最小物攻		*/		public int MinATK;		/**		* 最大物攻		*/		public int MaxATK;		/**		* 最小法攻		*/		public int MinMATK;		/**		* 最大法攻		*/		public int MaxMATK;		/**		* 最小物防		*/		public int MinDEF;		/**		* 最大物防		*/		public int MaxDEF;		/**		* 最小法防		*/		public int MinMDEF;		/**		* 最大法防		*/		public int MaxMDEF;		/**		* 命中		*/		public int HIT;		/**		* 闪避		*/		public int DODGE;		/**		* 暴击率		*/		public int CRIRate;		/**		* 抗暴击		*/		public int DUCrate;		/**		* 物理攻击减免		*/		public int ADTR;		/**		* 魔法减免		*/		public int MR;		/**		* 抗麻痹		*/		public int DUPAC;		/**		* 战斗中回血速度		*/		public int FightHPup;		/**		* 平时回血速度		*/		public int Unfighthpup;		/**		* 地图		*/		public string Map;		/**		* 是否显示刷新公告		*/		public int IsShowRefresh;		/**		* 掉落组ID		*/		public int DropID;		/**		* 任务掉落		*/		public string Taskdrop;		/**		* 任务掉落几率		*/		public float Taskdroprate;		/**		* 功能ID		*/		public string Funcid;		/**		* 功能参数		*/		public string Funcparams;		/**		* 功能数据		*/		public string Funcdatas;		/**		* 客户端功能ID		*/		public int ClientFunctionId;		/**		* 客户端功能参数		*/		public string[] ClientFunctionParams;		/**		* 默认对话		*/		public string Dialog;		/**		* 随机喊话		*/		public string[] RandomDialog;		/**		* 是否会喊话		*/		public bool CanSpeak;		/**		* 排序规则		*/		public bool ShowBehind;		/**		* 屏蔽淡入特效		*/		public bool HideFadeShow;		/**		* 简单掉落ID		*/		public int SimpleDropID;		/**		* boss积分		*/		public int BossCon;		/**		* 头像		*/		public string HeadIcon;		/**		* 是否统计		*/		public bool IsCount;		/**		* 挖掘次数		*/		public int DigCount;		/**		* 挖掘物品		*/		public int DigItemID;		/**		* 所需匕首数目		*/		public int Needknife;		/**		* 改变挖掘天数		*/		public int DigOpenDay;		/**		* 挖掘物品		*/		public int DigItemID2;		/**		* 是否可以跑步		*/		public int CanRun;		/**		* 是否显示攻击怪物伤害		*/		public int IsShowDamage;		/**		* 是否可以被撞		*/		public bool CanPush;		static public Dictionary<int, TbDataUnit> temples=new Dictionary<int,TbDataUnit>();		static public void initdata(Dictionary<int,Hashtable> table){			foreach(Hashtable tb in table.Values){			try{				TbDataUnit tp=new TbDataUnit();				temples[(int)tb["Id"]] = tp;				tp.Id=(int)tb["Id"];				tp.Name=(string)tb["Name"];				tp.Editdir=(string)tb["Editdir"];				tp.Type=(int)tb["Type"];				tp.SubType=(int)tb["SubType"];				tp.UnitTeam=(int)tb["UnitTeam"];				tp.IsDanger=(bool)tb["IsDanger"];				tp.Head=(int)tb["Head"];				tp.RELev=(int)tb["RELev"];				tp.Lev=(int)tb["Lev"];				tp.Model=(int)tb["Model"];				tp.Weapon=(int)tb["Weapon"];				tp.Wing=(int)tb["Wing"];				tp.UpIcon=(string)tb["UpIcon"];				tp.Size=(int)tb["Size"];				tp.TeleportID=(int)tb["TeleportID"];				tp.Exp=(int)tb["Exp"];				tp.InsidePowerExp=(int)tb["InsidePowerExp"];				tp.Interval=(int)tb["Interval"];				tp.AI=(int)tb["AI"];				tp.Aimodel=(int)tb["Aimodel"];				tp.Sight=(int)tb["Sight"];				tp.Maxmove=(int)tb["Maxmove"];				tp.Patrol=(int)tb["Patrol"];				tp.PatrolTime=(int)tb["PatrolTime"];				tp.DeadTime=(int)tb["DeadTime"];				tp.RefreshTime=(int)tb["RefreshTime"];				tp.MoveTime=(int)tb["MoveTime"];				tp.MinStayTime=(int)tb["MinStayTime"];				tp.MaxStayTime=(int)tb["MaxStayTime"];				tp.DeadNumber=(int)tb["DeadNumber"];				tp.MoveInMusic=(int)tb["MoveInMusic"];				tp.MinDamage=(int)tb["MinDamage"];				tp.MaxDamage=(int)tb["MaxDamage"];				tp.MHP=(int)tb["MHP"];				tp.MinATK=(int)tb["MinATK"];				tp.MaxATK=(int)tb["MaxATK"];				tp.MinMATK=(int)tb["MinMATK"];				tp.MaxMATK=(int)tb["MaxMATK"];				tp.MinDEF=(int)tb["MinDEF"];				tp.MaxDEF=(int)tb["MaxDEF"];				tp.MinMDEF=(int)tb["MinMDEF"];				tp.MaxMDEF=(int)tb["MaxMDEF"];				tp.HIT=(int)tb["HIT"];				tp.DODGE=(int)tb["DODGE"];				tp.CRIRate=(int)tb["CRIRate"];				tp.DUCrate=(int)tb["DUCrate"];				tp.ADTR=(int)tb["ADTR"];				tp.MR=(int)tb["MR"];				tp.DUPAC=(int)tb["DUPAC"];				tp.FightHPup=(int)tb["FightHPup"];				tp.Unfighthpup=(int)tb["Unfighthpup"];				tp.Map=(string)tb["Map"];				tp.IsShowRefresh=(int)tb["IsShowRefresh"];				tp.DropID=(int)tb["DropID"];				tp.Taskdrop=(string)tb["Taskdrop"];				tp.Taskdroprate=(float)tb["Taskdroprate"];				tp.Funcid=(string)tb["Funcid"];				tp.Funcparams=(string)tb["Funcparams"];				tp.Funcdatas=(string)tb["Funcdatas"];				tp.ClientFunctionId=(int)tb["ClientFunctionId"];				tp.ClientFunctionParams=(string[])tb["ClientFunctionParams"];				tp.Dialog=(string)tb["Dialog"];				tp.RandomDialog=(string[])tb["RandomDialog"];				tp.CanSpeak=(bool)tb["CanSpeak"];				tp.ShowBehind=(bool)tb["ShowBehind"];				tp.HideFadeShow=(bool)tb["HideFadeShow"];				tp.SimpleDropID=(int)tb["SimpleDropID"];				tp.BossCon=(int)tb["BossCon"];				tp.HeadIcon=(string)tb["HeadIcon"];				tp.IsCount=(bool)tb["IsCount"];				tp.DigCount=(int)tb["DigCount"];				tp.DigItemID=(int)tb["DigItemID"];				tp.Needknife=(int)tb["Needknife"];				tp.DigOpenDay=(int)tb["DigOpenDay"];				tp.DigItemID2=(int)tb["DigItemID2"];				tp.CanRun=(int)tb["CanRun"];				tp.IsShowDamage=(int)tb["IsShowDamage"];				tp.CanPush=(bool)tb["CanPush"];			}catch(System.Exception ee){				System.Console.WriteLine(ee);			}			}		}	static public TbDataUnit select(int id) {		if (temples.ContainsKey(id)) {			return temples[id];		}		return null;	}	}}