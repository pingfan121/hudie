using System.Collections.Generic;using System.Collections;using GameLib.game;using GameServer.Define.EnumNormal;namespace GameDb.Data{	public class TbDataSkill{		/**		* 技能ID		*/		public int Id;		/**		* 技能名		*/		public string Name;		/**		* 图标		*/		public string Icon;		/**		* 是否显示		*/		public bool IsShow;		/**		* 是否替换自动技能		*/		public bool ReplaceAutoUse;		/**		* 是否需要服务器验证		*/		public bool NeedCheck;		/**		* 是否延迟释放		*/		public bool UseDelay;		/**		* 物理技能预判系数		*/		public int PredictRatio;		/**		* 备注		*/		public string Desc;		/**		* 职业		*/		public int Job;		/**		* 所需物品		*/		public int NeedItem;		/**		* 技能等级		*/		public int Skilllev;		/**		* 升级技能		*/		public int UpgradeSkill;		/**		* 训练技能		*/		public int PracticeCategory;		/**		* 使用熟练度		*/		public int UseProficeiency;		/**		* 需要熟练度		*/		public int NeedProficiency;		/**		* 需要等级		*/		public int NeedLevel;		/**		* 是否是最高等级		*/		public bool IsMax;		/**		* 技能类别		*/		public int SkillCategory;		/**		* 技能书ID		*/		public int SkillBookID;		/**		* 技能属性类型		*/		public int SkillType;		/**		* 消耗HP		*/		public int NeedHP;		/**		* 消耗MP		*/		public int NeedMP;		/**		* 冷却时间		*/		public int Cdtime;		/**		* 公共冷却		*/		public int Pubcdtime;		/**		* 是否可挂机使用		*/		public bool IsAutoSkill;		/**		* 挂机使用是否为群体技能		*/		public bool IsAutoRangeSkill;		/**		* 引导次数		*/		public int BootCount;		/**		* 引导间隔		*/		public int BootInterval;		/**		* 施放方式		*/		public int ReleaseType;		/**		* 攻击目标选择方式		*/		public int TargetSelect;		/**		* 形状		*/		public int Shape;		/**		* 特效播放方式		*/		public int EffectPlayMode;		/**		* 最小施法距离		*/		public int MinDistance;		/**		* 最大施法距离		*/		public int MaxDistance;		/**		* 影响范围		*/		public int Range;		/**		* 最大影响人数		*/		public int Maxcount;		/**		* 目标类型		*/		public int[] TargetType;		/**		* 目标关系		*/		public int[] TargetRelation;		/**		* 伤害效果		*/		public int DmgEffect;		/**		* 位置命中系数		*/		public int PosHitRatio;		/**		* 位置伤害系数		*/		public int PosDmgRatio;		/**		* 技能攻击系数		*/		public int ATKRate;		/**		* 技能附加威力		*/		public int ATKVal;		/**		* 防御抵消伤害系数		*/		public int DamageRate;		/**		* 触发buffID1		*/		public int BuffID1;		/**		* 触发buffID1		*/		public int BuffID2;		/**		* 触发功能几率1		*/		public int Funcrate1;		/**		* 功能ID1		*/		public int Funcid1;		/**		* 触发功能几率2		*/		public int Funcrate2;		/**		* 功能ID2		*/		public int Funcid2;		/**		* 是否打断		*/		public bool IsStopDig;		/**		* 技能资源		*/		public int SkillResId;		/**		* 面板排序		*/		public int Sort;		/**		* 伤害延迟播放时间		*/		public int DamageDelayTime;		/**		* 是否为友方技能		*/		public bool IsFriend;		static public Dictionary<int, TbDataSkill> temples=new Dictionary<int,TbDataSkill>();		static public void initdata(Dictionary<int,Hashtable> table){			foreach(Hashtable tb in table.Values){			try{				TbDataSkill tp=new TbDataSkill();				temples[(int)tb["Id"]] = tp;				tp.Id=(int)tb["Id"];				tp.Name=(string)tb["Name"];				tp.Icon=(string)tb["Icon"];				tp.IsShow=(bool)tb["IsShow"];				tp.ReplaceAutoUse=(bool)tb["ReplaceAutoUse"];				tp.NeedCheck=(bool)tb["NeedCheck"];				tp.UseDelay=(bool)tb["UseDelay"];				tp.PredictRatio=(int)tb["PredictRatio"];				tp.Desc=(string)tb["Desc"];				tp.Job=(int)tb["Job"];				tp.NeedItem=(int)tb["NeedItem"];				tp.Skilllev=(int)tb["Skilllev"];				tp.UpgradeSkill=(int)tb["UpgradeSkill"];				tp.PracticeCategory=(int)tb["PracticeCategory"];				tp.UseProficeiency=(int)tb["UseProficeiency"];				tp.NeedProficiency=(int)tb["NeedProficiency"];				tp.NeedLevel=(int)tb["NeedLevel"];				tp.IsMax=(bool)tb["IsMax"];				tp.SkillCategory=(int)tb["SkillCategory"];				tp.SkillBookID=(int)tb["SkillBookID"];				tp.SkillType=(int)tb["SkillType"];				tp.NeedHP=(int)tb["NeedHP"];				tp.NeedMP=(int)tb["NeedMP"];				tp.Cdtime=(int)tb["Cdtime"];				tp.Pubcdtime=(int)tb["Pubcdtime"];				tp.IsAutoSkill=(bool)tb["IsAutoSkill"];				tp.IsAutoRangeSkill=(bool)tb["IsAutoRangeSkill"];				tp.BootCount=(int)tb["BootCount"];				tp.BootInterval=(int)tb["BootInterval"];				tp.ReleaseType=(int)tb["ReleaseType"];				tp.TargetSelect=(int)tb["TargetSelect"];				tp.Shape=(int)tb["Shape"];				tp.EffectPlayMode=(int)tb["EffectPlayMode"];				tp.MinDistance=(int)tb["MinDistance"];				tp.MaxDistance=(int)tb["MaxDistance"];				tp.Range=(int)tb["Range"];				tp.Maxcount=(int)tb["Maxcount"];				tp.TargetType=(int[])tb["TargetType"];				tp.TargetRelation=(int[])tb["TargetRelation"];				tp.DmgEffect=(int)tb["DmgEffect"];				tp.PosHitRatio=(int)tb["PosHitRatio"];				tp.PosDmgRatio=(int)tb["PosDmgRatio"];				tp.ATKRate=(int)tb["ATKRate"];				tp.ATKVal=(int)tb["ATKVal"];				tp.DamageRate=(int)tb["DamageRate"];				tp.BuffID1=(int)tb["BuffID1"];				tp.BuffID2=(int)tb["BuffID2"];				tp.Funcrate1=(int)tb["Funcrate1"];				tp.Funcid1=(int)tb["Funcid1"];				tp.Funcrate2=(int)tb["Funcrate2"];				tp.Funcid2=(int)tb["Funcid2"];				tp.IsStopDig=(bool)tb["IsStopDig"];				tp.SkillResId=(int)tb["SkillResId"];				tp.Sort=(int)tb["Sort"];				tp.DamageDelayTime=(int)tb["DamageDelayTime"];				tp.IsFriend=(bool)tb["IsFriend"];			}catch(System.Exception ee){				System.Console.WriteLine(ee);			}			}		}	static public TbDataSkill select(int id) {		if (temples.ContainsKey(id)) {			return temples[id];		}		return null;	}	}}